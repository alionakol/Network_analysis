library(WGCNA)
library(psych)
library(psychTools)
library(data.table)
library(dplyr)
options(stringsAsFactors = FALSE)

#netw_low - data frame with the expression of 50 genes for low group
#netw_high - data frame with the expression of 50 genes for low group

#Combine high and low groups in the multiset to remove the same gemes with a lot of missing values
# We have two sets:
nSets = 2
# Descriptive names of the two sets.
setLabels = c("Low ZNF768", "High ZNF768")
shortLabels = c("Low", "High")
# Form multi-set expression data
multiExpr = vector(mode = "list", length = nSets)
multiExpr[[1]] = list(data = as.data.frame(netw_low))
names(multiExpr[[1]]$data) = colnames(netw_low)
rownames(multiExpr[[1]]$data) = rownames(netw_low)
multiExpr[[2]] = list(data = as.data.frame(netw_high))
names(multiExpr[[2]]$data) = colnames(netw_high)
rownames(multiExpr[[2]]$data) = rownames(netw_high)
# Check that the data has the correct format for many functions operating on multiple sets:
exprSize = checkSets(multiExpr,checkStructure = TRUE)

# Check that all genes and samples have sufficiently low numbers of missing values.
gsg = goodSamplesGenesMS(multiExpr, verbose = 3)
gsg$allOK #TRUE

#In case if FALSE
if (!gsg$allOK)
{
    # Print information about the removed genes:
    if (sum(!gsg$goodGenes) > 0)
        printFlush(paste("Removing genes:", paste(names(multiExpr[[1]]$data)[!gsg$goodGenes],
                                                  collapse = ", ")))
    for (set in 1:exprSize$nSets)
    {

        if (sum(!gsg$goodSamples[[set]]))
            printFlush(paste("In set", setLabels[set], "removing samples",
                             paste(rownames(multiExpr[[set]]$data)[!gsg$goodSamples[[set]]], collapse = ", ")))
        # Remove the offending genes and samples
        multiExpr[[set]]$data = multiExpr[[set]]$data[gsg$goodSamples[[set]], gsg$goodGenes];
    }
    # Update exprSize
    exprSize = checkSets(multiExpr) ##gene expr data
}

